@use "sass:math";

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Responsive Ratio
@mixin ratio($x,$y, $pseudo: false) {
	$padding: unquote( ( $y / $x ) * 100 + "%" );

	@if $pseudo {
        &::before {

            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

// Mobile-first media-queries
$breakpoints:  (
  "xs": 25em, // 400px
  "sm": 34em, // 544px
  "md": 48em, // 768px
  "lg": 60em, // 960px
  "xl": 80em, // 1280px
  "xxl": 90em // 1440px
);

@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get( $breakpoints, $breakpoint );
    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

// Fluid Typography
@function strip-unit( $value ) {

  @return math.div($value, $value * 0 + 1);
}

@mixin fluid-font( $min-width, $max-width, $min-font-size, $max-font-size ) {
  $unit1: unit( $min-width );
  $unit2: unit( $max-width );
  $unit3: unit( $min-font-size );
  $unit4: unit( $max-font-size );

  @if $unit1 == $unit2 and $unit1 == $unit3 and $unit1 == $unit4 {
    & {
      font-size: $min-font-size;
      line-height: $min-font-size * 1.618;

      @media screen and (min-width: $min-width) {
        font-size:
        calc(
          #{$min-font-size} + #{strip-unit( $max-font-size - $min-font-size )} *
            ((100vw - #{$min-width}) / #{strip-unit( $max-width - $min-width )})
        );
        line-height:
        calc(
          #{$min-font-size} + #{strip-unit( $max-font-size - $min-font-size )} *
            1.618 *
            ((100vw - #{$min-width}) / #{strip-unit( $max-width - $min-width )})
        );
      }

      @media screen and (min-width: $max-width) {
        font-size: $max-font-size;
        line-height: $max-font-size * 1.618;
      }
    }
  }
}

// Transition animation
@mixin transition($place, $time, $ease) {
  -moz-transition: $place $time $ease;
  -webkit-transition: $place $time $ease;
  -o-transition-property: $place $time $ease;
  -ms-transition-property: $place $time $ease;
  transition-property: $place $time $ease;
  transition: $place $time $ease;
}

// Logical properties for position and writing mode properties


// todo: refactor positioning and writing mode properties using mixin
