{"version":3,"sources":["src/navigation.js"],"names":["siteNavigation","document","getElementById","mobileSiteNavigation","button","getElementsByTagName","menu","classList","contains","add","addEventListener","toggle","getAttribute","setAttribute","event","target","remove","_step","links","linksWithChildren","querySelectorAll","_iterator","_createForOfIteratorHelper","s","n","done","link","value","toggleFocus","err","e","f","_step2","_iterator2","style","display","type","self","this","tagName","toLowerCase","parentNode","menuItem","preventDefault","_step3","_iterator3","children"],"mappings":"qpCAME,WACD,IAAMA,EAAiBC,SAASC,eAAgB,mBAC1CC,EAAuBF,SAASC,eAAgB,qCAEtD,GAAOF,GAAoBG,EAA3B,CAIA,IAAMC,EAASD,EAAqBE,qBAAsB,UAAY,GAGtE,QAAK,IAAuBD,EAA5B,CAIA,IAAME,EAAOH,EAAqBE,qBAAsB,MAAQ,GAGhE,QAAK,IAAuBC,EAA5B,CAKOA,EAAKC,UAAUC,SAAU,aAC/BF,EAAKC,UAAUE,IAAK,YAIrBL,EAAOM,iBAAkB,SAAS,WACjCP,EAAqBI,UAAUI,OAAQ,WAES,SAA3CP,EAAOQ,aAAc,iBACzBR,EAAOS,aAAc,gBAAiB,SAEtCT,EAAOS,aAAc,gBAAiB,WAQxCZ,SAASS,iBAAkB,SAAS,SAAUI,GACvBd,EAAeQ,SAAUM,EAAMC,UAGpDf,EAAeO,UAAUS,OAAQ,WACjCZ,EAAOS,aAAc,gBAAiB,aAKxC,IApDYI,EAoDNC,EAAQZ,EAAKD,qBAAsB,KAGnCc,EAAoBb,EAAKc,iBAAkB,4DAvDrCC,EAAAC,2BA0DQJ,GA1DR,IA0DZ,IAAAG,EAAAE,MAAAN,EAAAI,EAAAG,KAAAC,MAA4B,CAAA,IAAhBC,EAAgBT,EAAAU,MAC3BD,EAAKhB,iBAAkB,QAASkB,GAAa,GAC7CF,EAAKhB,iBAAkB,OAAQkB,GAAa,IA5DjC,MAAAC,GAAAR,EAAAS,EAAAD,GAAA,QAAAR,EAAAU,IAAA,IAAAC,EAAAC,EAAAX,2BAgEQH,GAhER,IAgEZ,IAAAc,EAAAV,MAAAS,EAAAC,EAAAT,KAAAC,MAAwC,CAAAO,EAAAL,MAClCjB,iBAAkB,aAAckB,GAAa,IAjEvC,MAAAC,GAAAI,EAAAH,EAAAD,GAAA,QAAAI,EAAAF,UAmBX3B,EAAO8B,MAAMC,QAAU,QAoDxB,SAASP,IACR,GAAoB,UAAfd,MAAMsB,MAAmC,SAAftB,MAAMsB,KAGpC,IAFA,IAAIC,EAAOC,MAEDD,EAAK9B,UAAUC,SAAU,aAE7B,OAAS6B,EAAKE,QAAQC,eAC1BH,EAAK9B,UAAUI,OAAQ,SAExB0B,EAAOA,EAAKI,WAId,GAAoB,eAAf3B,MAAMsB,KAAwB,CAClC,IAAMM,EAAWJ,KAAKG,WACtB3B,MAAM6B,iBAF4B,IAAAC,EAAAC,EAAAvB,2BAGdoB,EAASD,WAAWK,UAHN,IAGlC,IAAAD,EAAAtB,MAAAqB,EAAAC,EAAArB,KAAAC,MAAmD,CAAA,IAAvCC,EAAuCkB,EAAAjB,MAC7Ce,IAAahB,GACjBA,EAAKnB,UAAUS,OAAQ,UALS,MAAAa,GAAAgB,EAAAf,EAAAD,GAAA,QAAAgB,EAAAd,IAQlCW,EAASnC,UAAUI,OAAQ,WA5F5B","sourcesContent":["/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n( function() {\n\tconst siteNavigation = document.getElementById( 'site-navigation' );\n\tconst mobileSiteNavigation = document.getElementById( 'mobile-nav mobile-site-navigation' );\n\t// Return early if the navigation don't exist.\n\tif ( ! siteNavigation && ! mobileSiteNavigation ) {\n\t\treturn;\n\t}\n\n\tconst button = mobileSiteNavigation.getElementsByTagName( 'button' )[ 0 ];\n\n\t// Return early if the button don't exist.\n\tif ( 'undefined' === typeof button ) {\n\t\treturn;\n\t}\n\n\tconst menu = mobileSiteNavigation.getElementsByTagName( 'ul' )[ 0 ];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ( 'undefined' === typeof menu ) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tif ( ! menu.classList.contains( 'nav-menu' ) ) {\n\t\tmenu.classList.add( 'nav-menu' );\n\t}\n\n\t// Toggle the .toggled class and the aria-expanded value each time the button is clicked.\n\tbutton.addEventListener( 'click', function() {\n\t\tmobileSiteNavigation.classList.toggle( 'toggled' );\n\n\t\tif ( button.getAttribute( 'aria-expanded' ) === 'true' ) {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t} else {\n\t\t\tbutton.setAttribute( 'aria-expanded', 'true' );\n\t\t}\n\t} );\n\n\t// Check the viewport size add HTML5 global hidden attribute\n\tconst width = (window.innerWidth > 0) ? window.innerWidth : screen.width;\n\n\t// Remove the .toggled class and set aria-expanded to false when the user clicks outside the navigation.\n\tdocument.addEventListener( 'click', function( event ) {\n\t\tconst isClickInside = siteNavigation.contains( event.target );\n\n\t\tif ( ! isClickInside ) {\n\t\t\tsiteNavigation.classList.remove( 'toggled' );\n\t\t\tbutton.setAttribute( 'aria-expanded', 'false' );\n\t\t}\n\t} );\n\n\t// Get all the link elements within the menu.\n\tconst links = menu.getElementsByTagName( 'a' );\n\n\t// Get all the link elements with children within the menu.\n\tconst linksWithChildren = menu.querySelectorAll( '.menu-item-has-children > a, .page_item_has_children > a' );\n\n\t// Toggle focus each time a menu link is focused or blurred.\n\tfor ( const link of links ) {\n\t\tlink.addEventListener( 'focus', toggleFocus, true );\n\t\tlink.addEventListener( 'blur', toggleFocus, true );\n\t}\n\n\t// Toggle focus each time a menu link with children receive a touch event.\n\tfor ( const link of linksWithChildren ) {\n\t\tlink.addEventListener( 'touchstart', toggleFocus, false );\n\t}\n\n\t/**\n\t * Sets or removes .focus class on an element.\n\t */\n\tfunction toggleFocus() {\n\t\tif ( event.type === 'focus' || event.type === 'blur' ) {\n\t\t\tlet self = this;\n\t\t\t// Move up through the ancestors of the current link until we hit .nav-menu.\n\t\t\twhile ( ! self.classList.contains( 'nav-menu' ) ) {\n\t\t\t\t// On li elements toggle the class .focus.\n\t\t\t\tif ( 'li' === self.tagName.toLowerCase() ) {\n\t\t\t\t\tself.classList.toggle( 'focus' );\n\t\t\t\t}\n\t\t\t\tself = self.parentNode;\n\t\t\t}\n\t\t}\n\n\t\tif ( event.type === 'touchstart' ) {\n\t\t\tconst menuItem = this.parentNode;\n\t\t\tevent.preventDefault();\n\t\t\tfor ( const link of menuItem.parentNode.children ) {\n\t\t\t\tif ( menuItem !== link ) {\n\t\t\t\t\tlink.classList.remove( 'focus' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tmenuItem.classList.toggle( 'focus' );\n\t\t}\n\t}\n}() );\n"]}